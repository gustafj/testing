language: minimal

stages:
  - clean
  - install
  - generate
  - package
  - name: deploy
    if: branch = master

addons:
  apt:
    packages:
      - tree

# Cache all the generated files between stages (and builds)
cache:
  directories:
    - build

jobs:
  include:
    - stage: clean
      name: "Clean out cache"
      script:
        - tree build
        - rm -rf build

    - stage: install
      name: "Fetch protoc binaries"
      script:
        - mkdir -p build/protoc
        - pushd build/protoc
        - wget https://github.com/google/protobuf/releases/download/v3.6.1/protoc-3.6.1-linux-x86_64.zip
        - unzip -u protoc*.zip
        - export PATH=$PATH:$PWD/bin
        - popd
        - tree build/protoc/

    - stage: install
      name: "Fetch Go gRPC protoc plugin"
      language: go
      go: "1.10"
      install: true # Skip default
      script:
        - go get -u github.com/golang/protobuf/protoc-gen-go
        - export PATH=$PATH:$GOPATH/bin

    - stage: install
      name: "Fetch C# gRPC protoc plugin"
      language: csharp
      mono: none
      dotnet: 2.0
      install: true # Skip default
      script:
        - mkdir -p build/csharp_project
        - pushd build/csharp_project
        - dotnet new console
        - env NUGET_PACKAGES=$PWD/packages dotnet add package grpc.tools
        - popd

    - stage: generate
      name: "Generate Go sources"
      language: go
      go: "1.10"
      install: true # Skip default
      script:
        - mkdir -p build/go
        - which protoc
        - echo "$TRAVIS_BUILD_NUMBER" >> build/go/generated.txt
        - tree build/go

    - stage: generate
      name: "Generate C# sources"
      language: csharp
      mono: none
      dotnet: 2.0
      install: true # Skip default
      script:
        - mkdir -p build/csharp
        - which protoc
        - ls -la build/csharp_project/grpc.tools/*/tools/linux_x64/
        - echo "$TRAVIS_BUILD_NUMBER" >> build/csharp/generated.txt
        - tree build/csharp

    - stage: generate
      name: "Generate Python sources"
      language: python
      python: "3.6"
      install: true # Skip default
      script:
        - mkdir -p build/python
        - echo "$TRAVIS_BUILD_NUMBER" >> build/python/generated.txt
        - tree build/python

    - stage: package
      name: "Build .NET nupkg from C# sources"
      language: csharp
      mono: none
      dotnet: 2.0
      install: true # Skip default
      script:
        - touch build/csharp/gen.$TRAVIS_BUILD_NUMBER.nupkg

    - stage: package
      name: "Build wheel pkg from Python sources"
      language: python
      python: "3.6"
      install: true # Skip default
      script:
        - touch build/python/gen.$TRAVIS_BUILD_NUMBER.whl

    - stage: deploy
      name: "Deploy Go generated sources back to repo"
      deploy:
        provider: pages
        local-dir: build/go/
        target-branch: go1
        keep-history: true
        github-token: $GITHUB_TOKEN
        verbose: true

    - stage: deploy
      name: "Deploy C# generated sources back to repo"
      deploy:
        provider: pages
        local-dir: build/csharp/
        target-branch: csharp
        keep-history: true
        github-token: $GITHUB_TOKEN
        verbose: true

      # Deploy Python generated sources back to repo
      # Deploy .NET nupkg to NuGet
      # Deploy wheel to PyPi

